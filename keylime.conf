[general]
#=============================================================================
# these options are self explanatory ip/port combinations to find the various 
# keylime services on the network.  some services use these, some do not. 
# But they are used frequently enough that they end up here
cloudverifier_port = 8881
registrar_port = 8883
registrar_ip = 127.0.0.1
cloudnode_port = 9002
provider_registrar_port = 8884
provider_registrar_ip = 127.0.0.1

# turn on or off TLS keylime wide
enable_tls = True

# turn on or off DNS hostname checking for TLS certificates.
tls_check_hostnames = False

#=============================================================================
[cloud_node]
#=============================================================================
# What is the name of the rsa key that keylime should use for protecting 
# shares of U/V
rsa_keyname = tci_rsa_key

# what filename in /var/lib/keylime/secure should the encryption key be placed
enc_keyname = derived_tci_key

# what filename in /var/lib/keylime/secure should the optional decrypted 
# payload be placed
dec_payload_file = decrypted_payload

# size of the memory backed tmpfs partition where keylime stores crypto keys
# use syntax that mount would accept as a size parameter for tmpfs
# the default below sets it to 1 megabyte
secure_size = 1m

# use this option to set the TPM ownerpassword to something you want to use.  
# Set it to "generate" if you want keylime to choose a random owner password 
# for you
tpm_ownerpassword = generate

# set to true to allow the cloud_node to automatically extract a zip file in
# the delivered payload after it has been decrypted.  It will be decrypted to
# a folder unzipped in /var/lib/keylime/secure.  Note the limits on the size
# of the tmpfs partition above with secure_size option
extract_payload_zip = True

# set the node's uuid to the given value.  
# set to 'openstack', it will try to get the uuid from the metadata service
# if you set this to 'generate', keylime will create a random uuid
# if you set this to 'hash_ek', keylime will set the UUID to the result
# of SHA256(public EK in PEM format)
node_uuid = D432FBB3-D2F1-4A97-9EF7-75BD81C00000

#=============================================================================
[cloud_verifier]
#=============================================================================
# Cloud Verifier TLS options.  This is for authenticating the CV itself,
# authenticating the users of the CV and securing the transmission of keys
#
# tls_dir option sets directory in /var/lib/keylime/ to put CA certificates 
# and files for TLS.  
# set to "generate" to automatically generate a CA/certificates in dir cv_ca
# if set to "generate":  ca_cert, my_cert, and private_key must be "default"
# if you specify generate, you can manage the CA that the verifier will create
# using keylime_ca -d /var/lib/keylime/cv_ca/ 
tls_dir = generate

# the filename (in tls_dir) of the CA cert for verifying client certificates
ca_cert = default

# the filename (in tls_dir) of the cloud verifier certificate and private key
# the following two options also take the string "default" to find a files 
# with names <fully_qualified_name>-cert.crt and 
# <fully_qualified_name>-public.pem for cert and private key respectively
my_cert = default
private_key = default

# set the password to Decrypt the private key file.  this should be set to a 
# strong password
# if tls_dir=generate, this password will also be used to protect the 
# generated CA private key
private_key_pw = default

# Registrar client TLS options.  this allows the CV to authenticate the 
# registar before asking for AIKs
# this option sets the directory where the CA certificate for the registrar 
# can be found
# use "default" to use 'reg_ca' (this points it to the directory automatically
# created by the registrar if it is set to "generate"
# use "CV" to use 'cv_ca', the directory automatically created (and shared 
# with the registar) by the CV
registrar_tls_dir = CV

# the file in registar_tls_dir that contains the registrar's CA certificate 
# use "default" to us the standard cacert.crt name
registrar_ca_cert = default

# The file to use for SQLite persistence of node data
db_filename = cv_data.sqlite

# number of worker processes to use for the cloud verifier
# set to 0 to create one worker per processor
multiprocessing_pool_num_workers = 0

# how long to wait between failed attempts to connect to a cloud node in
# seconds.  floating point values accepted here
retry_interval = 1

# integer number of retries to connect to a node before giving up
max_retries = 10

# time between integrity measurement checks in seconds.  Set to 0 to do as 
# fast as possible.  Floating point values accepted here
quote_interval = 2

#=============================================================================
[tenant]
#=============================================================================

# Tenant client TLS options.  This is for authenticating the CV itself and
# proving that the tenant can talk to the CV. 
# tls_dir option sets directory in /var/lib/keylime/ to find client 
# certificates for talking to the CV.
# and files for TLS.  
# set to default to use the CA setup by the cloud_verifier on the same machine
# files will be in /var/lib/keylime/cv_ca/
tls_dir = default
# the following three options set the filenames in tls_dir where the CA 
# certificate, client certificate, and client private key file are
# if tls_dir = default, then default values will be used for ca_cert =
# cacert.pem, my_cert = tenant-cert.crt, and private_key = tenant-private.pem
ca_cert = default
my_cert = default
private_key = default

# set the password to Decrypt the private key file.  this should be set to a 
# strong password
# if you are using the auto generated keys from the CV, set the same password
# here as you did for private_key_pw in the [cloud_verifier] section
private_key_pw = default

# Registrar client TLS options.  this allows the tenant to authenticate the 
# registar before asking for AIKs
# this option sets the directory where the CA certificate for the registrar 
# can be found
# use "default" to use 'reg_ca' (this points it to the directory automatically
# created by the registrar if it is set to "generate"
# use "CV" to use 'cv_ca', the directory automatically created (and shared 
# with the registar) by the CV
registrar_tls_dir = CV

# the file in registar_tls_dir that contains the registrar's CA certificate 
# use "default" to us the standard cacert.crt name
registrar_ca_cert = default

# You can set the default address/host to find the verifier with this option
# this will be overwritten by the -v option on the command line if specified
cloudverifier_ip = 127.0.0.1

# max size of payload the tenant will take in bytes (default 1 megabyte)
# make sure this matches with secure_size param in the [cloud_node] section.
# don't send things bigger than the tmpfs where they will be decrypted
max_payload_size = 1048576

# TPM policies are json structures that takes a list of accepted pcr values 
# and will match any in the list for that pcr
# if you include PCR 10 (e.g., "10":"0000000000000000000000000000000000000000"
# keylime will attempt to validate an Linux IMA measurement list.  The value
# specified here in the policy is ignored and computed based on the provided
# measurement list
# note that you can't set a policy on PCR16 because keylime uses it internally
tpm_policy = {"22":["0000000000000000000000000000000000000001","ffffffffffffffffffffffffffffffffffffffff"],"15":"0000000000000000000000000000000000000000"}

# Same as tpm_policy but for virtual PCRs
vtpm_policy = {"23":"0000000000000000000000000000000000000000","15":"0000000000000000000000000000000000000000"}

# specify the file containing whitelists for processing Linux IMA white lists
# this file should be in the form 
# SHA1sum path_to_file
ima_whitelist = whitelist.txt

# specify a file containing paths that should be ignored by IMA
# use with great caution as it will affect the security of IMA
ima_excludelist = exclude.txt

# how long to wait between failed attempts to connect to a cloud node in
# seconds.  floating point values accepted here
retry_interval = 1

# integer number of retries to connect to a node before giving up
max_retries = 10

#=============================================================================
[registrar]
#=============================================================================

# Registrar TLS options.  This is for authenticating the registrar to clients
# who want to query AIKs
#
# tls_dir option sets directory in /var/lib/keylime/ to put CA certificates 
# and files for TLS.  
# set to "generate" to automatically generate a CA/certificates in dir reg_ca
# if you specify generate, you can manage the CA that the verifier will create
# using keylime_ca -d /var/lib/keylime/reg_ca/ 
# 
# set to "CV" to share the CA with the cloud verifier (which must be run first 
# once before starting the registrar so it can generate the keys)
tls_dir = CV

# the filename (in tls_dir) of the CA cert for for the registrar's
# TODO, this could be removed, but the code is ugly to remove
ca_cert = default

# the filename (in tls_dir) of the registrar certificate and private key
# the following two options also take the string "default" to find a files 
# with names <fully_qualified_name>-cert.crt and 
# <fully_qualified_name>-public.pem for cert and private key respectively
my_cert = default
private_key = default

# set the password to Decrypt the private key file.  this should be set to a 
# strong password
# if tls_dir=generate, this password will also be used to protect the 
# generated CA private key
private_key_pw = default

# Registrar client TLS options.  this allows the registrar to authenticate the 
# provider registrar before asking for AIKs
# this option sets the directory where the CA certificate for the provider
# registrar can be found
# use "default" to use 'reg_ca' (this points it to the directory automatically
# created by the provider registrar if it is set to "generate"
# use "CV" to use 'cv_ca', the directory automatically created (and shared 
# with the registar) by the CV
registrar_tls_dir = CV

# the file in registar_tls_dir that contains the provider registrar's CA 
# certificate  
# use "default" to us the standard cacert.crt name
registrar_ca_cert = default

# tell the registrar whether to require an EK certificate from the TPM.
# if set to False the registrar will ignore EK certificates entirely
require_ek_cert = True

# The file to use for SQLite persistence of node data
db_filename = reg_data.sqlite

# The file to use for SQLite persistence of provider hypervisor data
prov_db_filename = provider_reg_data.sqlite

#=============================================================================
[ca]
#=============================================================================
# These options set the metadata into the certificates that the keylime_ca 
# utility will use when creating certificates and CAs.
# These options are also used by the verifier and registrar when using the
# tls_dir=generate option
# the below options are pretty self explanatory X509 stuff.
cert_country=US
cert_ca_name=keylime certificate authority
cert_state=MA
cert_locality=Lexington
cert_organization=MITLL
cert_org_unit=53
cert_ca_lifetime=3650
cert_lifetime=365
cert_bits=2048

#=============================================================================
# GLOBAL LOGGING CONFIGURATION
#=============================================================================
# the only thing really to change here is the default log levels for either 
# console or keylime loggers

[loggers]
keys = root,keylime

[handlers]
keys = consoleHandler

[formatters]
keys = formatter

[formatter_formatter]
format = %(created)s - %(name)s - %(levelname)s - %(message)s
datefmt = 

[logger_root]
level = INFO
handlers = consoleHandler

[handler_consoleHandler]
class = StreamHandler
level = DEBUG
formatter = formatter
args = (sys.stdout,)

[logger_keylime]
level = DEBUG
qualname = keylime
handlers = 
